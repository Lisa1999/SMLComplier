row: 1			value: (*			token: LPMul
row: 1			value: case			token: Case
row: 1			value: 1			token: ConstInt
row: 1			value: *)			token: MulRP
row: 2			value: val			token: Val
row: 2			value: symbol1			token: IdAlpha
row: 2			value: =			token: Equal
row: 2			value: 4			token: ConstInt
row: 2			value: mod			token: DivInt
row: 2			value: 2			token: ConstInt
row: 3			value: val			token: Val
row: 3			value: symbol2			token: IdAlpha
row: 3			value: =			token: Equal
row: 3			value: 4			token: ConstInt
row: 3			value: div			token: ModInt
row: 3			value: 2			token: ConstInt
row: 4			value: val			token: Val
row: 4			value: charA			token: IdAlpha
row: 4			value: =			token: Equal
row: 4			value: a			token: ConstChar
row: 5			value: val			token: Val
row: 5			value: neg			token: IdAlpha
row: 5			value: =			token: Equal
row: 5			value: ~2			token: ConstInt
row: 6			value: val			token: Val
row: 6			value: word1			token: IdAlpha
row: 6			value: =			token: Equal
row: 6			value: 432			token: ConstWord
row: 7			value: val			token: Val
row: 7			value: string1			token: IdAlpha
row: 7			value: =			token: Equal
row: 7			value: hello world!			token: ConstString
row: 9			value: (*			token: LPMul
row: 9			value: case			token: Case
row: 9			value: 2			token: ConstInt
row: 9			value: *)			token: MulRP
row: 10			value: val			token: Val
row: 10			value: rec			token: Rec
row: 10			value: factorial			token: IdAlpha
row: 10			value: =			token: Equal
row: 11			value: fn			token: Fn
row: 11			value: n			token: IdAlpha
row: 11			value: =>			token: EqualMore
row: 11			value: case			token: Case
row: 11			value: n			token: IdAlpha
row: 11			value: of			token: Of
row: 11			value: 0			token: ConstInt
row: 11			value: =>			token: EqualMore
row: 11			value: 1			token: ConstInt
row: 12			value: |			token: Or
row: 12			value: n			token: IdAlpha
row: 12			value: =>			token: EqualMore
row: 12			value: n			token: IdAlpha
row: 12			value: *			token: Mul
row: 12			value: factorial			token: IdAlpha
row: 12			value: (			token: LP
row: 12			value: n			token: IdAlpha
row: 12			value: -			token: Minus
row: 12			value: 1			token: ConstInt
row: 12			value: )			token: RP
row: 14			value: (*			token: LPMul
row: 14			value: case			token: Case
row: 14			value: 3			token: ConstInt
row: 14			value: ???			token: IdAlpha
row: 14			value: *)			token: MulRP
row: 15			value: fun			token: Fun
row: 15			value: factorialIT			token: IdAlpha
row: 15			value: value			token: IdAlpha
row: 15			value: =			token: Equal
row: 16			value: let			token: Let
row: 17			value: val			token: Val
row: 17			value: flag			token: IdAlpha
row: 17			value: =			token: Equal
row: 17			value: ref			token: IdAlpha
row: 17			value: value			token: IdAlpha
row: 17			value: and			token: And
row: 17			value: i			token: IdAlpha
row: 17			value: =			token: Equal
row: 17			value: ref			token: IdAlpha
row: 17			value: 1			token: ConstInt
row: 18			value: in			token: In
row: 19			value: while			token: While
row: 19			value: !			token: Not
row: 19			value: flag			token: IdAlpha
row: 19			value: <>			token: NotEq
row: 19			value: 0			token: ConstInt
row: 19			value: do			token: Do
row: 19			value: (			token: LP
row: 20			value: i			token: IdAlpha
row: 20			value: :=			token: IdAlpha
row: 20			value: !			token: Not
row: 20			value: i			token: IdAlpha
row: 20			value: *			token: Mul
row: 20			value: !			token: Not
row: 20			value: flag			token: IdAlpha
row: 20			value: ;			token: Semicolon
row: 21			value: flag			token: IdAlpha
row: 21			value: :=			token: IdAlpha
row: 21			value: !			token: Not
row: 21			value: flag			token: IdAlpha
row: 21			value: -			token: Minus
row: 21			value: 1			token: ConstInt
row: 22			value: )			token: RP
row: 22			value: ;			token: Semicolon
row: 23			value: !			token: Not
row: 23			value: i			token: IdAlpha
row: 24			value: end			token: End
row: 24			value: ;			token: Semicolon
row: 26			value: (*			token: LPMul
row: 26			value: case			token: Case
row: 26			value: 4			token: ConstInt
row: 26			value: *)			token: MulRP
row: 27			value: fun			token: Fun
row: 27			value: factorial			token: IdAlpha
row: 27			value: 0			token: ConstInt
row: 27			value: =			token: Equal
row: 27			value: 1			token: ConstInt
row: 28			value: |			token: Or
row: 28			value: factorial			token: IdAlpha
row: 28			value: n			token: IdAlpha
row: 28			value: =			token: Equal
row: 28			value: n			token: IdAlpha
row: 28			value: *			token: Mul
row: 28			value: factorial			token: IdAlpha
row: 28			value: (			token: LP
row: 28			value: n			token: IdAlpha
row: 28			value: -			token: Minus
row: 28			value: 1			token: ConstInt
row: 28			value: )			token: RP
row: 30			value: (*			token: LPMul
row: 30			value: error			token: IdAlpha
row: 30			value: case			token: Case
row: 30			value: 1			token: ConstInt
row: 30			value: *)			token: MulRP
row: 31			value: fun			token: Fun
row: 31			value: factorial			token: IdAlpha
row: 31			value: 0			token: ConstInt
row: 31			value: =			token: Equal
row: 31			value: 			token: IdAlpha
row: 31			value: a			token: IdAlpha
row: 31			value: ++			token: IdAlpha
row: 31			value: a			token: IdAlpha
row: 32			value: |			token: Or
row: 32			value: factorial			token: IdAlpha
row: 32			value: ==			token: DoubleEq
row: 32			value: 0			token: ConstInt
row: 32			value: 0			token: ConstInt
row: 32			value: =			token: Equal
row: 32			value: n			token: IdAlpha
row: 32			value: *			token: Mul
row: 32			value: factorial			token: IdAlpha
row: 32			value: (			token: LP
row: 32			value: n			token: IdAlpha
row: 32			value: -			token: Minus
row: 32			value: 1			token: ConstInt
row: 32			value: )			token: RP
row: 34			value: (*			token: LPMul
row: 34			value: error			token: IdAlpha
row: 34			value: case			token: Case
row: 34			value: 2			token: ConstInt
row: 34			value: *)			token: MulRP
row: 35			value: val			token: Val
row: 35			value: rec			token: Rec
row: 35			value: factorial			token: IdAlpha
row: 35			value: =			token: Equal
row: 36			value: fn			token: Fn
row: 36			value: n			token: IdAlpha
row: 36			value: =>			token: EqualMore
row: 36			value: case			token: Case
row: 36			value: n			token: IdAlpha
row: 36			value: of			token: Of
row: 36			value: 0			token: ConstInt
row: 36			value: =>			token: EqualMore
row: 39			value: ~
                        | n => n * factorial (n - ~43.~)

|			token: IdAlpha
row: 39			value: n			token: IdAlpha
row: 39			value: =>			token: EqualMore
row: 39			value: n			token: IdAlpha
row: 39			value: *			token: Mul
row: 39			value: factorial			token: IdAlpha
row: 39			value: (			token: LP
row: 39			value: n			token: IdAlpha
row: 39			value: -			token: Minus
row: 39			value: ~43.			token: ConstReal
row: 39			value: )			token: RP
